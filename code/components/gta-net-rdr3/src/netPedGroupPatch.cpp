#include <StdInc.h>

#include <Hooking.h>
#include <Hooking.Stubs.h>
#include <MinHook.h>
#include <NetLibrary.h>

#include <GameInit.h>
#include <DirectXMath.h>

#include <CoreNetworking.h>
#include <CrossBuildRuntime.h>
#include <Error.h>
#include <CloneManager.h>
#include <xmmintrin.h>
#include <netPlayerManager.h>
#include <netObjectMgr.h>
#include <netObject.h>

struct PedGroupUnk49B0
{
	char pad[604];
};

struct UnkPedGroupData
{
	char pad[1208];
};

static constexpr int kMaxPedGroups = 67; // 129 + (68 - 32); // kMaxPlayers + 1;

struct CPedGroup
{
	uint8_t gap8[8];
	uint64_t qword10;
	uint8_t gap18[8];
	uint64_t qword20;
	uint8_t gap28[8];
	uint64_t qword30;
	uint8_t gap38[4104];
	uint64_t qword1040;
	uint8_t dword1048;
	uint64_t qword104C;
	uint8_t gap1054[3];
	uint8_t byte1057;
	uint8_t gap1058[80];
	uint64_t dword10A8;
	uint8_t gap10AC[44];
	uint32_t dword10D8;
	uint8_t gap10DC[388];
	uint64_t qword1260;
	uint64_t qword1268;
	uint64_t qword1270;
	uint64_t qword1278;
	uint64_t qword1280;
	uint64_t dword1288;
	uint64_t qword128C;
	uint64_t dword1294;
	uint64_t dword1298;
	uint8_t byte129C;
	uint8_t  byte129D;
	uint8_t byte129E;
	uint8_t gap129F;
	uint16_t word12A0;
	uint8_t gap12A2[6];
	uint64_t qword12A8;
	uint16_t word12B0;
	uint8_t gap12B2[2];
	uint32_t dword12B4;
	uint8_t byte12B8;
	uint8_t gap12B9[7];
	uint64_t oword12C0;
};
static_assert(sizeof(CPedGroup) == 4832, "Wrong Size!");

struct CPedGroupData
{
	uint32_t pad_000[kMaxPedGroups + 1];
	CPedGroup m_pedGroupList[kMaxPedGroups];
	PedGroupUnk49B0 unk_1448649B0[kMaxPedGroups];
	UnkPedGroupData unk_144864784[kMaxPedGroups];

	CPedGroup unk_144863768[kMaxPedGroups];
	CPedGroup unk_144863778[kMaxPedGroups];
	CPedGroup unk_1448649F0[kMaxPedGroups];
	CPedGroup unk_1448B3AD0[kMaxPedGroups];
};

CPedGroupData* pedGroupArray;

struct PatternPair
{
	std::string_view pattern;
	int offset;
	int operand_remaining = 4;
};

struct PatternAbsolutePair
{
	std::string_view pattern;
	int offset;
	intptr_t address;
	int count;
	int id;
};

static void RelocateRelative(void* base, std::initializer_list<PatternPair> list)
{
	void* oldAddress = nullptr;

	for (auto& entry : list)
	{
		auto location = hook::get_pattern<int32_t>(entry.pattern, entry.offset);

		if (!oldAddress)
		{
			oldAddress = hook::get_address<void*>(location, 0, entry.operand_remaining);
		}

		auto curTarget = hook::get_address<void*>(location, 0, entry.operand_remaining);
		assert(curTarget == oldAddress);

		hook::put<int32_t>(location, (intptr_t)base - (intptr_t)location - entry.operand_remaining);
	}
}

struct PatternPatchPair
{
	std::string_view pattern;
	int offset;
	int intendedValue;
	int newValue;
};

template<class T>
static void PatchValue(std::initializer_list<PatternPatchPair> list)
{
	for (auto& entry : list)
	{
		auto location = hook::pattern(entry.pattern).count(1).get(0).get<T>(entry.offset);
		auto origVal = *location;
		trace("orig value %i %i\n", origVal, (uint32_t)origVal);
		assert(origVal == entry.intendedValue);
		hook::put<T>(location, entry.newValue);
	}
}

static void RelocateAbsolute(std::initializer_list<PatternAbsolutePair> list)
{
	for (const auto& entry : list)
	{
		auto location = hook::pattern(entry.pattern).count(entry.count).get(entry.id).get<int32_t>(entry.offset);
		hook::put<int32_t>(location, entry.address - hook::get_adjusted(0x140000000));
	}
}

#if 0
static HookFunction hookFunction([]() 
{
	pedGroupArray = reinterpret_cast<CPedGroupData*>(hook::AllocateStubMemory(sizeof(CPedGroupData)));

	RelocateRelative(&pedGroupArray->pad_000, {
		{"48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 0D ? ? ? ? 0F 57 DB 0F 28 15 ? ? ? ? 0F 57 C0 0F 5C C1 0F 29 0D ? ? ? ? 0F 5C DA 0F 29 15 ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 1D ? ? ? ? C3 CC 48 83 EC ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 48 8B 05 ? ? ? ? 48 89 05 ? ? ? ? C3 CC 48 83 EC", 3}
	});

	// Patch PedGroupList
	RelocateRelative(&pedGroupArray->m_pedGroupList, {
        { "48 8D 1D ? ? ? ? BF ? ? ? ? 48 8B CB E8 ? ? ? ? 48 81 C3 ? ? ? ? 48 83 EF ? 75 ? 48 8D 0D ? ? ? ? 48 8B 5C 24 ? 48 83 C4 ? 5F E9 ? ? ? ? CC CC CC 48 83 EC ? 48 8D 0D ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? 48 83 EC ? 48 8D 0D", 3 },
		{ "48 8D 1D ? ? ? ? BF ? ? ? ? 8B D5", 3 },
		{ "4C 8D 35 ? ? ? ? 48 69 F0 ? ? ? ? 33 D2", 3 },
        { "48 8D 05 ? ? ? ? 33 D2 48 03 D8", 3 },
	    { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? C6 83", 3 },
		{ "48 8D 0D ? ? ? ? 48 69 C0 ? ? ? ? 48 03 C1 48 83 C4", 3 },
		{ "48 8D 05 ? ? ? ? 48 03 F0 48 8B CE", 3 },
		{ "48 8D 05 ? ? ? ? 48 69 D1 ? ? ? ? 48 03 D0", 3 },
		{ "48 8D 1D ? ? ? ? BF ? ? ? ? F6 83", 3 },
		{ "48 8D 1D ? ? ? ? F3 0F 10 35 ? ? ? ? BF", 3 },
		{ "48 8D 05 ? ? ? ? 44 84 84 01", 3 },
		{ "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? 48 03 C8", 3 },
		{ "48 8D 1D ? ? ? ? BF ? ? ? ? 33 D2", 3 },
		{ "4C 8D 25 ? ? ? ? BE ? ? ? ? 39 9F", 3 },
		{ "48 8D 05 ? ? ? ? 48 03 C8 EB ? 33 C9 48 85 C9 74 ? 8A 81", 3 },
		{ "48 8D 05 ? ? ? ? 48 03 E8 EB", 3 },
		{ "48 8D 05 ? ? ? ? 48 03 F0 EB", 3 },
		{ "48 8D 0D ? ? ? ? 48 03 F9", 3 },
		{ "4C 8D 15 ? ? ? ? 48 83 E3", 3 },
		{ "48 8D 0D ? ? ? ? 48 03 C1 C3 FF C8", 3 },
		{ "4C 8D 0D ? ? ? ? B9 ? ? ? ? 45 85 C0", 3 },
		{ "48 8D 2D ? ? ? ? BF ? ? ? ? 85 C0", 3 },
		{ "48 8D 2D ? ? ? ? 80 3D ? ? ? ? ? 74", 3 },
        { "48 8D 05 ? ? ? ? 48 69 C9 ? ? ? ? 48 03 C8 48 8B 41", 3 },
        { "48 8D 0D ? ? ? ? 48 03 D9", 3 },
        { "48 8D 0D ? ? ? ? 48 03 C1 EB", 3 },
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? FF 8C 01 ? ? ? ? 4D 8B 50", 3 },
        { "48 8D 05 ? ? ? ? 41 B0 ? 48 69 DF", 3 },
        { "48 8D 05 ? ? ? ? 48 69 FE", 3 },
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? FF 8C 01 ? ? ? ? 48 8B 5C 24 ? 48 8B 74 24 ? 48 83 C4 ? 5F C3 90", 3},
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? FF 8C 01 ? ? ? ? 48 8B 5C 24 ? 48 8B 74 24 ? 48 83 C4 ? 5F C3 CC", 3 },
        { "48 8D 05 ? ? ? ? 48 03 D8 F6 83 ? ? ? ? ? 0F 84",3 },
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 0F 84", 3 }, 
        { "48 8D 05 ? ? ? ? 48 03 F0 48 89 75", 3 },
        { "48 8D 05 ? ? ? ? 4C 03 E8 41 38 B5", 3 },
        { "48 8D 05 ? ? ? ? 33 D2 48 03 C8", 3 },
        { "48 8D 05 ? ? ? ? 48 69 DB ? ? ? ? 48 8D 54 24", 3 }, 
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? 48 8D 1C 01 48 8B CB", 3 },
        { "48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? 48 8D 1C 01 EB", 3 },
        { "48 8D 0D ? ? ? ? 48 69 D2", 3 },
        { "48 8D 05 ? ? ? ? 48 03 F8 74", 3 },
        { "48 8D 05 ? ? ? ? 48 03 D8 74", 3 },
        { "48 8D 05 ? ? ? ? 48 69 D9 ? ? ? ? 48 03 D8", 3 },
        { "48 8D 0D ? ? ? ? F6 84 08", 3 },
        { "48 8D 05 ? ? ? ? 48 69 F9 ? ? ? ? 48 03 F8", 3 },
        { "48 8D 05 ? ? ? ? 48 03 D8 EB ? 33 DB", 3 },
        { "48 8D 05 ? ? ? ? 48 03 F0 0F 84 ? ? ? ? 48 8D 4E", 3 },
	});

	RelocateRelative(&pedGroupArray->unk_144863768, {
		{"48 8D 3D ? ? ? ? 8D 73 ? 8B CB", 3}
	});

	RelocateRelative(&pedGroupArray->unk_144863778, { // unk_144863778
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? 83 F8", 3},
       { "48 8D 05 ? ? ? ? 48 83 E2 ? 48 03 C8", 3},
       { "48 8D 05 ? ? ? ? 48 03 C8 74 ? 48 8B D3 E8 ? ? ? ? 84 C0", 3 },
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? 41 8B 86", 3 },
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? 48 83 C4 ? 5B C3 CC", 3 },
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? 84 C0 74 ? 32 C0", 3 },
       { "48 8D 05 ? ? ? ? 48 03 F8 33 DB", 3 },
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? F6 D8", 3},
       { "48 8D 05 ? ? ? ? 48 8B D6 48 03 C8 E8 ? ? ? ? 84 C0", 3 },
       { "48 8D 05 ? ? ? ? 48 8B D7 48 03 C8 E8 ? ? ? ? 84 C0", 3 }, 
       { "48 8D 15 ? ? ? ? 48 69 C9 ? ? ? ? 45 33 C0", 3 },
       { "48 8D 05 ? ? ? ? 48 03 C8 E8 ? ? ? ? 65 48 8B 04 25 ? ? ? ? 48 8B 0C F8", 3 }
	});

	RelocateRelative(&pedGroupArray->unk_144864784, {
		{"48 8D 05 ? ? ? ? 44 01 24 01", 3},
		{"48 8D 05 ? ? ? ? 44 01 3C 01", 3},
		{"48 8D 05 ? ? ? ? FF 04 01", 3}
	});

	RelocateRelative(&pedGroupArray->unk_1448649B0, {
		{"48 8D 1D ? ? ? ? BE ? ? ? ? 48 8B 3B", 3}
	});

	RelocateRelative(&pedGroupArray->unk_1448649F0, { // unk_1448649F0
		{"4C 8D 0D ? ? ? ? BD", 3},
		{"4C 8D 05 ? ? ? ? 49 03 C8 F6 01", 3},
		{"48 8D 3D ? ? ? ? F3 0F 10 35 ? ? ? ? 33 DB", 3}
	});

	RelocateRelative(&pedGroupArray->unk_1448B3AD0, {
		{"48 8D 3D ? ? ? ? 48 81 EF ? ? ? ? 48 8B CF E8 ? ? ? ? 48 83 EB ? 75 ? 48 8B 5C 24 ? 48 83 C4 ? 5F C3 CC CC 48 8D 0D ? ? ? ? E9 ? ? ? ? 48 8D 0D ? ? ? ? E9 ? ? ? ? 48 8D 0D ? ? ? ? E9 ? ? ? ? 48 8D 0D ? ? ? ? E9 ? ? ? ? 48 8D 0D ? ? ? ? E9 ? ? ? ? 48 8D 0D ? ? ? ? E9 ? ? ? ? C2", 3},
		{"48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? C7 44 24 ? ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 4C 8B DC 48 83 EC ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 49 8D 53 ? 49 8D 43 ? C7 44 24 ? ? ? ? ? 49 89 43 ? 48 8D 0D ? ? ? ? 0F 28 44 24 ? 66 0F 7F 44 24 ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 0D ? ? ? ? 0F 57 DB 0F 28 15 ? ? ? ? 0F 57 C0 0F 5C C1 0F 29 0D ? ? ? ? 0F 5C DA 0F 29 15 ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 1D ? ? ? ? C3 CC 48 83 EC ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? CC CC CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 29 05 ? ? ? ? C3 CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 0F 28 05 ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 28 05 ? ? ? ? 0F 29 0D ? ? ? ? 0F 28 0D ? ? ? ? 0F 29 05 ? ? ? ? 0F 29 0D ? ? ? ? C3 CC CC CC 48 8B 05 ? ? ? ? 48 89 05 ? ? ? ? C3 CC 48 83 EC", 3}
	});

	RelocateAbsolute({
	    //{ "48 8B 8B ? ? ? ? 48 85 C9 74 ? 48 8B D3 E8 ? ? ? ? 48 81 C3", 3, (intptr_t)&pedGroupArray->unk_1448649F0, 1, 0 },
	    //{"8A 81 ? ? ? ? 48 8B D9 D0 E8 A8 ? 74 ? 48 63 B1", 3, (intptr_t)&pedGroupArray->unk_1448649F0, 1, 0 },
	    //{ "F6 81 ? ? ? ? ? 48 8B D9 0F 29 70 ? 0F 28 F1", 2, (intptr_t)&pedGroupArray->unk_1448649F0, 1, 0 }

	});


	#if 0
	// Patch array initalization
	PatchValue<uint32_t>({
		{ "BF ? ? ? ? 48 8B CB E8 ? ? ? ? 48 81 C3 ? ? ? ? 48 83 EF ? 75 ? 48 8D 0D ? ? ? ? 48 8B 5C 24 ? 48 83 C4 ? 5F E9 ? ? ? ? CC CC CC 48 83 EC ? 48 8D 0D ? ? ? ? E8 ? ? ? ? 48 8D 0D ? ? ? ? 48 83 C4 ? E9 ? ? ? ? 48 83 EC ? 48 8D 0D", 1, 0x44, kMaxPedGroups },
		{ "BF ? ? ? ? 8B D5 48 8B CB E8 ? ? ? ? 48 81 C3", 1, 0x44, kMaxPedGroups },
		{ "BF ? ? ? ? F6 83 ? ? ? ? ? 74 ? 48 8B CB", 1, 0x44, kMaxPedGroups },
		{ "BF ? ? ? ? F6 83 ? ? ? ? ? 74 ? 0F 28 CE", 1, 0x44, kMaxPedGroups },
		{ "BF ? ? ? ? 33 D2 48 8B CB E8 ? ? ? ? 48 81 C3", 1, 0x44, kMaxPedGroups },
	});

	PatchValue<uint8_t>({
		{ "8D 51 ? 8B C2 7E", 2, 0x44, kMaxPedGroups },
		{ "83 FB ? 72 ? 0F 28 C6 48 8B 5C 24 ? 48 8B 74 24", 2, 0x44, kMaxPedGroups },
		{ "83 F8 ? 73 ? 44 8B 0D", 2, 0x44, kMaxPedGroups },
		{ "83 7C 24 ? ? 73 ? 8B 44 24 ? 48 69 C8 ? ? ? ? 48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? 48 8D 1C 01 48 8B CB", 4, 0x44, kMaxPedGroups },
		{ "83 7C 24 ? ? 73 ? 8B 44 24 ? 48 69 C8 ? ? ? ? 48 8D 05 ? ? ? ? F6 84 01 ? ? ? ? ? 74 ? 48 8D 1C 01 EB", 4, 0x44, kMaxPedGroups },
		{ "83 79 ? ? 48 8B F1 0F 83 ? ? ? ? E8", 3, 0x44, kMaxPedGroups },
		{ "83 FB ? 72 ? 80 3D", 2, 0x44, kMaxPedGroups }
	});

	// Patch Group playerIndex comparisions
	PatchValue<uint8_t>({ 
		{ "83 F8 ? 76 ? BA ? ? ? ? C7 44 24 ? ? ? ? ? 41 B8 ? ? ? ? 48 8D 0D ? ? ? ? 44 8D 4A ? E8 ? ? ? ? 84 C0 74 ? 48 69 C7", 2, 0x1F, 128 } 
	});
#endif
});
#endif
